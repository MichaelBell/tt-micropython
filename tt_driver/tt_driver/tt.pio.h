// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// tt_out //
// ------ //

#define tt_out_wrap_target 0
#define tt_out_wrap 13

static const uint16_t tt_out_program_instructions[] = {
            //     .wrap_target
    0x6021, //  0: out    x, 1            side 0     
    0x0024, //  1: jmp    !x, 4           side 0     
    0xa542, //  2: nop                    side 1 [1] 
    0xb542, //  3: nop                    side 5 [1] 
    0x6021, //  4: out    x, 1            side 0     
    0xe046, //  5: set    y, 6            side 0     
    0xc024, //  6: irq    wait 4          side 0     
    0x6101, //  7: out    pins, 1         side 0 [1] 
    0x1187, //  8: jmp    y--, 7          side 4 [1] 
    0x002c, //  9: jmp    !x, 12          side 0     
    0x6901, // 10: out    pins, 1         side 2 [1] 
    0x1900, // 11: jmp    0               side 6 [1] 
    0x6101, // 12: out    pins, 1         side 0 [1] 
    0x1100, // 13: jmp    0               side 4 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tt_out_program = {
    .instructions = tt_out_program_instructions,
    .length = 14,
    .origin = -1,
};

static inline pio_sm_config tt_out_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tt_out_wrap_target, offset + tt_out_wrap);
    sm_config_set_sideset(&c, 3, false, false);
    return c;
}
#endif

// ----- //
// tt_in //
// ----- //

#define tt_in_wrap_target 0
#define tt_in_wrap 6

static const uint16_t tt_in_program_instructions[] = {
            //     .wrap_target
    0xe046, //  0: set    y, 6                       
    0x20c4, //  1: wait   1 irq, 4                   
    0x2021, //  2: wait   0 pin, 1                   
    0x4001, //  3: in     pins, 1                    
    0x20a1, //  4: wait   1 pin, 1                   
    0x4001, //  5: in     pins, 1                    
    0x0084, //  6: jmp    y--, 4                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program tt_in_program = {
    .instructions = tt_in_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config tt_in_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + tt_in_wrap_target, offset + tt_in_wrap);
    return c;
}

void tt_out_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint scan_pin) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, scan_pin);
    pio_gpio_init(pio, scan_pin + 1);
    pio_gpio_init(pio, scan_pin + 2);
    pio_sm_set_consecutive_pindirs(pio, sm, scan_pin, 3, true);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    pio_sm_config c = tt_out_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 1);
    sm_config_set_out_shift(&c, false, true, 10);
    sm_config_set_sideset_pins(&c, scan_pin);
    sm_config_set_clkdiv(&c, 1.f);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
void tt_in_program_init(PIO pio, uint sm, uint offset, uint data_pin) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, data_pin + 1);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 2, false);
    pio_sm_config c = tt_in_program_get_default_config(offset);
    sm_config_set_in_pins(&c, data_pin);
    sm_config_set_in_shift(&c, false, true, 8);
    sm_config_set_clkdiv(&c, 1.f);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

